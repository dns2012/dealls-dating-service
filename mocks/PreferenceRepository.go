// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/dns2012/dealls-dating-service/app/domain/entity"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/dns2012/dealls-dating-service/app/domain/repository"
)

// PreferenceRepository is an autogenerated mock type for the PreferenceRepository type
type PreferenceRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, args
func (_m *PreferenceRepository) Count(ctx context.Context, args *repository.PreferenceFilterArgs) (int64, error) {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.PreferenceFilterArgs) (int64, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.PreferenceFilterArgs) int64); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.PreferenceFilterArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, preference
func (_m *PreferenceRepository) Create(ctx context.Context, preference *entity.Preference) (*entity.Preference, error) {
	ret := _m.Called(ctx, preference)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Preference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Preference) (*entity.Preference, error)); ok {
		return rf(ctx, preference)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Preference) *entity.Preference); ok {
		r0 = rf(ctx, preference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Preference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Preference) error); ok {
		r1 = rf(ctx, preference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBy provides a mock function with given fields: ctx, args
func (_m *PreferenceRepository) FindBy(ctx context.Context, args *repository.PreferenceFilterArgs) (*entity.Preference, error) {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for FindBy")
	}

	var r0 *entity.Preference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.PreferenceFilterArgs) (*entity.Preference, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.PreferenceFilterArgs) *entity.Preference); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Preference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.PreferenceFilterArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBy provides a mock function with given fields: ctx, args
func (_m *PreferenceRepository) ListBy(ctx context.Context, args *repository.PreferenceFilterArgs) ([]*entity.Preference, error) {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListBy")
	}

	var r0 []*entity.Preference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.PreferenceFilterArgs) ([]*entity.Preference, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.PreferenceFilterArgs) []*entity.Preference); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Preference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.PreferenceFilterArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPreferenceRepository creates a new instance of PreferenceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPreferenceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PreferenceRepository {
	mock := &PreferenceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
