// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	v1 "github.com/dns2012/dealls-dating-service/proto/schema/v1"
)

// UserSchemaServer is an autogenerated mock type for the UserSchemaServer type
type UserSchemaServer struct {
	mock.Mock
}

// CreateUserPreference provides a mock function with given fields: _a0, _a1
func (_m *UserSchemaServer) CreateUserPreference(_a0 context.Context, _a1 *v1.CreateUserPreferenceRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserPreference")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateUserPreferenceRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateUserPreferenceRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateUserPreferenceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUser provides a mock function with given fields: _a0, _a1
func (_m *UserSchemaServer) ListUser(_a0 context.Context, _a1 *v1.ListUserRequest) (*v1.ListUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListUser")
	}

	var r0 *v1.ListUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListUserRequest) (*v1.ListUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListUserRequest) *v1.ListUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Me provides a mock function with given fields: _a0, _a1
func (_m *UserSchemaServer) Me(_a0 context.Context, _a1 *emptypb.Empty) (*v1.UserResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Me")
	}

	var r0 *v1.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) (*v1.UserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) *v1.UserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedUserSchemaServer provides a mock function with given fields:
func (_m *UserSchemaServer) mustEmbedUnimplementedUserSchemaServer() {
	_m.Called()
}

// NewUserSchemaServer creates a new instance of UserSchemaServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserSchemaServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserSchemaServer {
	mock := &UserSchemaServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
