// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	usecase "github.com/dns2012/dealls-dating-service/app/usecase"
	mock "github.com/stretchr/testify/mock"
)

// LoginUsecase is an autogenerated mock type for the LoginUsecase type
type LoginUsecase struct {
	mock.Mock
}

// Call provides a mock function with given fields: ctx, params
func (_m *LoginUsecase) Call(ctx context.Context, params *usecase.LoginUsecaseParams) (*usecase.LoginUsecaseResult, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 *usecase.LoginUsecaseResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *usecase.LoginUsecaseParams) (*usecase.LoginUsecaseResult, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *usecase.LoginUsecaseParams) *usecase.LoginUsecaseResult); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.LoginUsecaseResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *usecase.LoginUsecaseParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoginUsecase creates a new instance of LoginUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoginUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoginUsecase {
	mock := &LoginUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
