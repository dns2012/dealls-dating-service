// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/dns2012/dealls-dating-service/app/domain/entity"
	manager "github.com/dns2012/dealls-dating-service/app/domain/manager"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/dns2012/dealls-dating-service/app/domain/repository"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserRepository) Create(ctx context.Context, user *entity.User) (*entity.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) (*entity.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) *entity.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBy provides a mock function with given fields: ctx, args
func (_m *UserRepository) FindBy(ctx context.Context, args *repository.UserFilterArgs) (*entity.User, error) {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for FindBy")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.UserFilterArgs) (*entity.User, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.UserFilterArgs) *entity.User); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.UserFilterArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBy provides a mock function with given fields: ctx, args, pagination
func (_m *UserRepository) ListBy(ctx context.Context, args *repository.UserFilterArgs, pagination manager.Pagination) (*manager.Pagination, []*entity.User, error) {
	ret := _m.Called(ctx, args, pagination)

	if len(ret) == 0 {
		panic("no return value specified for ListBy")
	}

	var r0 *manager.Pagination
	var r1 []*entity.User
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.UserFilterArgs, manager.Pagination) (*manager.Pagination, []*entity.User, error)); ok {
		return rf(ctx, args, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.UserFilterArgs, manager.Pagination) *manager.Pagination); ok {
		r0 = rf(ctx, args, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*manager.Pagination)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.UserFilterArgs, manager.Pagination) []*entity.User); ok {
		r1 = rf(ctx, args, pagination)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*entity.User)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *repository.UserFilterArgs, manager.Pagination) error); ok {
		r2 = rf(ctx, args, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
