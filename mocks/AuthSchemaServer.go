// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/dns2012/dealls-dating-service/proto/schema/v1"
	mock "github.com/stretchr/testify/mock"
)

// AuthSchemaServer is an autogenerated mock type for the AuthSchemaServer type
type AuthSchemaServer struct {
	mock.Mock
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *AuthSchemaServer) Login(_a0 context.Context, _a1 *v1.LoginRequest) (*v1.AuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *v1.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.LoginRequest) (*v1.AuthResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.LoginRequest) *v1.AuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *AuthSchemaServer) Register(_a0 context.Context, _a1 *v1.RegisterRequest) (*v1.AuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *v1.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RegisterRequest) (*v1.AuthResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RegisterRequest) *v1.AuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.RegisterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedAuthSchemaServer provides a mock function with given fields:
func (_m *AuthSchemaServer) mustEmbedUnimplementedAuthSchemaServer() {
	_m.Called()
}

// NewAuthSchemaServer creates a new instance of AuthSchemaServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthSchemaServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthSchemaServer {
	mock := &AuthSchemaServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
