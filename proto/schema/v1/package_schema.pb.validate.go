// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schema/v1/package_schema.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Package with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Package) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Package with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PackageMultiError, or nil if none found.
func (m *Package) ValidateAll() error {
	return m.validate(true)
}

func (m *Package) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Price

	// no validation rules for UnlimitedSwap

	// no validation rules for TotalSwapPerDay

	if len(errors) > 0 {
		return PackageMultiError(errors)
	}

	return nil
}

// PackageMultiError is an error wrapping multiple validation errors returned
// by Package.ValidateAll() if the designated constraints aren't met.
type PackageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackageMultiError) AllErrors() []error { return m }

// PackageValidationError is the validation error returned by Package.Validate
// if the designated constraints aren't met.
type PackageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageValidationError) ErrorName() string { return "PackageValidationError" }

// Error satisfies the builtin error interface
func (e PackageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageValidationError{}

// Validate checks the field values on ListPackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPackageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPackageResponseMultiError, or nil if none found.
func (m *ListPackageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPackageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPackageResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPackageResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPackageResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPackageResponseMultiError(errors)
	}

	return nil
}

// ListPackageResponseMultiError is an error wrapping multiple validation
// errors returned by ListPackageResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPackageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPackageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPackageResponseMultiError) AllErrors() []error { return m }

// ListPackageResponseValidationError is the validation error returned by
// ListPackageResponse.Validate if the designated constraints aren't met.
type ListPackageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPackageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPackageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPackageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPackageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPackageResponseValidationError) ErrorName() string {
	return "ListPackageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPackageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPackageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPackageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPackageResponseValidationError{}

// Validate checks the field values on OrderPackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderPackageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderPackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderPackageRequestMultiError, or nil if none found.
func (m *OrderPackageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderPackageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := OrderPackageRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTotalPayment() <= 0 {
		err := OrderPackageRequestValidationError{
			field:  "TotalPayment",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderPackageRequestMultiError(errors)
	}

	return nil
}

// OrderPackageRequestMultiError is an error wrapping multiple validation
// errors returned by OrderPackageRequest.ValidateAll() if the designated
// constraints aren't met.
type OrderPackageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderPackageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderPackageRequestMultiError) AllErrors() []error { return m }

// OrderPackageRequestValidationError is the validation error returned by
// OrderPackageRequest.Validate if the designated constraints aren't met.
type OrderPackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderPackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderPackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderPackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderPackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderPackageRequestValidationError) ErrorName() string {
	return "OrderPackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrderPackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderPackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderPackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderPackageRequestValidationError{}
